<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1316.vd2290d3341a_f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2141.v5402e818a_779"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2141.v5402e818a_779">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Jenkins Job to complete the below tasks.&#xd;
1) Create AWS Infrastructure for ME&#xd;
2) Configure provisioned Instances&#xd;
3) Deploy Swarm Cluster&#xd;
4) Deploy ME Console</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>30</daysToKeep>
        <numToKeep>20</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
      <abortPrevious>false</abortPrevious>
    </org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>ent_name</name>
          <description>Please provide the newMonoly Enterprise Name</description>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>region</name>
          <description>AWS RegionName</description>
          <defaultValue>us-east-1</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>app_node_count</name>
          <description>Number of App Nodes</description>
          <defaultValue>1</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>db_node_count</name>
          <description>Number of DB Nodes</description>
          <defaultValue>1</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>core_url</name>
          <description>Core Server URL</description>
          <defaultValue>monoly.net</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>service_name</name>
          <defaultValue>monoly</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>compose_path</name>
          <description>compose_path</description>
          <defaultValue>https://transfer.sh/wUb3Xd1MFX/docker-compose.yaml</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>service_version</name>
          <description>service_version</description>
          <defaultValue>0.0.15</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>request_id</name>
          <description>request_id</description>
          <defaultValue>1234567890</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>server_url</name>
          <defaultValue>https://webhook.site/d5490b10-0268-4893-a3d6-8f1e698a559a</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>access_instance_type</name>
          <description>access_instance_type</description>
          <defaultValue>t3.micro</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>app_instance_type</name>
          <description>app_instance_type</description>
          <defaultValue>t3.large</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>db_instance_type</name>
          <description>db_instance_type</description>
          <defaultValue>t3.large</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ENV_SA_EMAIL</name>
          <description>ENV_SA_EMAIL</description>
          <defaultValue>akaushal@wudza.com</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ami</name>
          <defaultValue>ami-002070d43b0a4f171</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>service_url</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>vpcCidrBlock</name>
          <defaultValue>10.50.1.0/24</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3705.va_6a_c2775a_c17">
    <script>previousStageResult = false
pipeline 
{
    agent any
    stages 
    {
        stage(&apos;Generate Inventory File&apos;) 
        {
            steps 
            {
                script
                {
                    try {
                        build job: &apos;get_inventory&apos; , parameters:
                        [
                            string(name: &apos;ent_name&apos;,value: &quot;${ent_name}&quot;)
                        ]
                        previousStageResult = true
                    }
                    catch (Exception e) {
                        currentBuild.result = &apos;SUCCESS&apos;
                        previousStageResult = false
                    }    
                }
            }
        }
        stage(&apos;first-response&apos;) {
            parallel {
                stage(&apos;true&apos;) {
                    when {
                        expression {
                            return previousStageResult
                        }
                    }
                    steps {
                        echo &quot;Ansible Inventory Generated Successfully. Creating Infra..&quot;
                    }
                }
                stage(&apos;false&apos;) {
                    when {
                        expression {
                            return !previousStageResult
                        }
                    }
                    steps {
                        script {
                        sh &apos;curl &quot;${server_url}?request_id=${request_id}&amp;response_code=500&amp;response_string=Internal%20Error&quot;&apos;
                        currentBuild.result = &quot;FAILURE&quot;
                        error(&apos;error message&apos;)
                        sh &apos;exit 1&apos;
                        }
                    }
                }
            }
        }
        stage(&apos;Infra Provisioning for Monoly Enterprise Setup&apos;) 
        {
            steps 
            {
                script
                {
                    try {
                        build job: &apos;create_me&apos; , parameters:
                        [
                            string(name: &apos;ent_name&apos;,value: &quot;${ent_name}&quot;),
                            string(name: &apos;region&apos;,value: &quot;${region}&quot;),
                            string(name: &apos;app_node_count&apos;,value: &quot;${app_node_count}&quot;),
                            string(name: &apos;db_node_count&apos;,value: &quot;${db_node_count}&quot;),
                            string(name: &apos;core_url&apos;,value: &quot;${core_url}&quot;),
                            string(name: &apos;access_instance_type&apos;,value: &quot;${access_instance_type}&quot;),
                            string(name: &apos;app_instance_type&apos;,value: &quot;${app_instance_type}&quot;),
                            string(name: &apos;service_url&apos;,value: &quot;${service_url}&quot;),
                            string(name: &apos;ami&apos;,value: &quot;${ami}&quot;),
                            string(name: &apos;vpcCidrBlock&apos;,value: &quot;${vpcCidrBlock}&quot;),
                            string(name: &apos;db_instance_type&apos;,value: &quot;${db_instance_type}&quot;)
                        ]
                        previousStageResult = true
                    }
                    catch (Exception e) {
                        currentBuild.result = &apos;SUCCESS&apos;
                        previousStageResult = false
                    }        
                }
            }
        }
        stage(&apos;second-response&apos;) {
            parallel {
                stage(&apos;true&apos;) {
                    when {
                        expression {
                            return previousStageResult
                        }
                    }
                    steps {
                        sh &apos;curl &quot;${server_url}?request_id=${request_id}&amp;response_code=101&amp;response_string=Monoly%20Infra%20Created%20Successfully&quot;&apos;
                    }
                }
                stage(&apos;false&apos;) {
                    when {
                        expression {
                            return !previousStageResult
                        }
                    }
                    steps {
                        script {
                        sh &apos;curl &quot;${server_url}?request_id=${request_id}&amp;response_code=500&amp;response_string=Internal%20Error&quot;&apos;
                        currentBuild.result = &apos;FAILURE&apos;
                        error(&apos;error message&apos;)
                        sh &apos;exit 1&apos;
           
                        }
                    }
                }
            }
        }
        stage(&apos;Configure Monoly Enterprise Instances&apos;) {
            steps {
                script {
                    try {
                        build job: &quot;setup_vm&quot; , parameters:[
                            string(name: &apos;ent_name&apos;,value: &quot;${ent_name}&quot;), 
                            string(name: &apos;service_name&apos;,value: &quot;${service_name}&quot;), 
                            string(name: &apos;service_url&apos;,value: &quot;${service_url}&quot;),
                            string(name: &apos;vpcCidrBlock&apos;,value: &quot;${vpcCidrBlock}&quot;),
                            string(name: &apos;core_url&apos;,value: &quot;${core_url}&quot;)
                            ]
                        previousStageResult = true
                    }
                    catch (Exception e) {
                        currentBuild.result = &apos;SUCCESS&apos;
                        previousStageResult = false
                    }          
                }
            }
        }
        stage(&apos;third-response&apos;) {
            parallel {
                stage(&apos;true&apos;) {
                    when {
                        expression {
                            return previousStageResult
                        }
                    }
                    steps {
                        sh &apos;curl &quot;${server_url}?request_id=${request_id}&amp;response_code=102&amp;response_string=Monoly%20VMs%20Configured%20Successfully&quot;&apos;
                    }
                }
                stage(&apos;false&apos;) {
                    when {
                        expression {
                            return !previousStageResult
                        }
                    }
                    steps {
                        script {
                        sh &apos;curl &quot;${server_url}?request_id=${request_id}&amp;response_code=500&amp;response_string=Internal%20Error&quot;&apos;
                        currentBuild.result = &quot;FAILURE&quot;
                        error(&apos;error message&apos;)
                        sh &apos;exit 1&apos;
                        }
                    }
                }
            }
        }
        stage(&apos;Mount EFS on Monoly Enterprise Instances&apos;) {
            steps {
                script {
                    try {
                        build job: &quot;setup_efs&quot; , parameters:[
                            string(name: &apos;ent_name&apos;,value: &quot;${ent_name}&quot;), 
                            string(name: &apos;service_name&apos;,value: &quot;${service_name}&quot;), 
                            string(name: &apos;core_url&apos;,value: &quot;${core_url}&quot;)
                            ]
                        previousStageResult = true
                    }
                    catch (Exception e) {
                        currentBuild.result = &apos;SUCCESS&apos;
                        previousStageResult = false
                    }          
                }
            }
        }
        stage(&apos;fourth-response&apos;) {
            parallel {
                stage(&apos;true&apos;) {
                    when {
                        expression {
                            return previousStageResult
                        }
                    }
                    steps {
                        sh &apos;curl &quot;${server_url}?request_id=${request_id}&amp;response_code=103&amp;response_string=EFS%20Mounted%20on%20Monoly%20VMs%20Successfully&quot;&apos;
                    }
                }
                stage(&apos;false&apos;) {
                    when {
                        expression {
                            return !previousStageResult
                        }
                    }
                    steps {
                        script {
                        sh &apos;curl &quot;${server_url}?request_id=${request_id}&amp;response_code=500&amp;response_string=Internal%20Error&quot;&apos;
                        currentBuild.result = &quot;FAILURE&quot;
                        error(&apos;error message&apos;)
                        sh &apos;exit 1&apos;
                        }
                    }
                }
            }
        }
        stage(&apos;Provision Docker Swarm Cluster&apos;) {
            steps {
                script {
                    try {
                        build job: &quot;deploy_cluster&quot; , parameters:
                        [
                            string(name: &apos;ent_name&apos;,value: &quot;${ent_name}&quot;), 
                            string(name: &apos;service_name&apos;,value: &quot;${service_name}&quot;), 
                            string(name: &apos;vpcCidrBlock&apos;,value: &quot;${vpcCidrBlock}&quot;),
                            string(name: &apos;core_url&apos;,value: &quot;${core_url}&quot;)]
                        previousStageResult = true
                    }
                    catch (Exception e) {
                        currentBuild.result = &apos;SUCCESS&apos;
                        previousStageResult = false
                    }          
                }
            }
        }
        stage(&apos;fifth-response&apos;) {
            parallel {
                stage(&apos;true&apos;) {
                    when {
                        expression {
                            return previousStageResult
                        }
                    }
                    steps {
                        sh &apos;curl &quot;${server_url}?request_id=${request_id}&amp;response_code=103&amp;response_string=Docker%20Swarm%20Cluster%20Configured%20Successfully&quot;&apos;
                    }
                }
                stage(&apos;false&apos;) {
                    when {
                        expression {
                            return !previousStageResult
                        }
                    }
                    steps {
                        script {
                        sh &apos;curl &quot;${server_url}?request_id=${request_id}&amp;response_code=500&amp;response_string=Internal%20Error&quot;&apos;
                        currentBuild.result = &quot;FAILURE&quot;
                        error(&apos;error message&apos;)
                        sh &apos;exit 1&apos;
                        }
                    }
                }
            }
        }
        stage(&apos;Deploy Monoly Console Service&apos;) 
        {
            steps 
            {
                script
                {
                    try {
                        build job: &apos;deploy_console&apos; , parameters:
                        [
                            string(name: &apos;ent_name&apos;,value: &quot;${ent_name}&quot;),
                            string(name: &apos;region&apos;,value: &quot;${region}&quot;),
                            string(name: &apos;app_node_count&apos;,value: &quot;${app_node_count}&quot;),
                            string(name: &apos;db_node_count&apos;,value: &quot;${db_node_count}&quot;),
                            string(name: &apos;compose_path&apos;,value: &quot;${compose_path}&quot;),
                            string(name: &apos;service_version&apos;,value: &quot;${service_version}&quot;),
                            string(name: &apos;core_url&apos;,value: &quot;${core_url}&quot;),
                            string(name: &apos;vpcCidrBlock&apos;,value: &quot;${vpcCidrBlock}&quot;),
                            string(name: &apos;ENV_SA_EMAIL&apos;,value: &quot;${ENV_SA_EMAIL}&quot;),
                        ]
                        previousStageResult = true
                    }
                    catch (Exception e) {
                        currentBuild.result = &apos;SUCCESS&apos;
                        previousStageResult = false
                    }                                  
                }
            }
        }
        stage(&apos;final-response&apos;) {
            parallel {
                stage(&apos;true&apos;) {
                    when {
                        expression {
                            return previousStageResult
                        }
                    }
                    steps {
                        sh &apos;curl &quot;${server_url}?request_id=${request_id}&amp;response_code=200&amp;response_string=Monoly%20Console%20Deployed%20Successfully&quot;&apos;
                    }
                }
                stage(&apos;false&apos;) {
                    when {
                        expression {
                            return !previousStageResult
                        }
                    }
                    steps {
                        script {
                        sh &apos;curl &quot;${server_url}?request_id=${request_id}&amp;response_code=500&amp;response_string=Internal%20Error&quot;&apos;
                        currentBuild.result = &quot;FAILURE&quot;
                        error(&apos;error message&apos;)
                        sh &apos;exit 1&apos;
                        }
                    }
                }
            }
        }
        
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <authToken>9012873465</authToken>
  <disabled>false</disabled>
</flow-definition>
